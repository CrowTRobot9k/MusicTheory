// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace MusicTheory.Data.Music
{

    // ScaleNote
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public partial class ScaleNoteConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ScaleNote>
    {
        public ScaleNoteConfiguration()
            : this("dbo")
        {
        }

        public ScaleNoteConfiguration(string schema)
        {
            ToTable("ScaleNote", schema);
            HasKey(x => x.ScaleNoteId);

            Property(x => x.ScaleNoteId).HasColumnName(@"ScaleNoteId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ScaleId).HasColumnName(@"ScaleId").HasColumnType("int").IsRequired();
            Property(x => x.Interval).HasColumnName(@"Interval").HasColumnType("int").IsOptional();

            // Foreign keys
            HasRequired(a => a.Scale).WithMany(b => b.ScaleNotes).HasForeignKey(c => c.ScaleId).WillCascadeOnDelete(false); // FK_ScaleNote_Scale
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
